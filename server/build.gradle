plugins {
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
	id 'org.siouan.frontend-jdk11' version '6.0.0'
	id 'eclipse'
	id 'com.adarshr.test-logger' version '4.0.0'
	id 'com.google.cloud.tools.jib' version '3.4.4'
	id "com.diffplug.spotless" version "7.0.2"
}

apply plugin: 'io.spring.dependency-management'

group = 'games.lmdbg'
version = '0.0.2'
sourceCompatibility = '21'

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':rules')
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'

	implementation 'com.google.guava:guava:33.4.0-jre'

	implementation 'org.tinylog:tinylog-api:2.7.0'
	runtimeOnly 'org.tinylog:tinylog-impl:2.7.0'

	runtimeOnly 'org.flywaydb:flyway-core:11.3.2'

	runtimeOnly 'com.h2database:h2:2.2.224' //Dev DB
	runtimeOnly 'org.postgresql:postgresql' //Prod DB

	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation "org.mockito:mockito-core:5.15.2"

	testImplementation 'com.openpojo:openpojo:0.9.1'

	//Needed for Eclipse JUnit runner, see if it is still needed in the future.
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly "org.junit.platform:junit-platform-commons:1.10.3"
}

test {
	useJUnitPlatform()
	testlogger {
		showPassedStandardStreams false
    	showSkippedStandardStreams false
		showFailedStandardStreams true
		showFullStackTraces true
    }
}

frontend {
	nodeDistributionProvided = false
	nodeVersion = '18.12.1'
}

sonarqube {
  properties {
    property "sonar.projectKey", "knary_LegendaryStats"
    property "sonar.organization", "kon"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.sources", "src/main/java,src/main/resources/templates,src/main/resources/static/scripts/,src/main/resources/static/styles/"
  }
}

jacocoTestReport {
    dependsOn test
    reports {
    	html.required = true
    	xml.required = true
	}
}

spotless {
  java {
  	removeUnusedImports()
  	importOrder()
  	cleanthat()
  	
  	eclipse().configFile('misc/eclipseformat.xml')
  }
}

task javascriptCopy(type: Copy) {
	dependsOn installFrontend

	inputs.files(fileTree('node_modules'))

	from 'node_modules'

	include '*/dist/*.js'

	eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = fileCopyDetails.name
    }

    into 'build/resources/main/static/scripts'

    outputs.files(fileTree('build/resources/main/static/scripts'))
}

jib {
	from.image = 'adoptopenjdk:16'
	extraDirectories.paths = ['src/main/resources']
}

task cssCopy(type: Copy) {
	dependsOn installFrontend

	inputs.files(fileTree('node_modules'))
	from '.'

	include 'node_modules/*/*.css'

	eachFile { fileCopyDetails ->
        fileCopyDetails.path = fileCopyDetails.name
    }

    into 'build/resources/main/static/styles'

    outputs.files(fileTree('build/resources/main/static/styles'))
}

task copyFromNpm(type: Task) {
	dependsOn javascriptCopy
	dependsOn cssCopy

	inputs.files(fileTree('node_modules'))
}

tasks.processResources {
    // make sure we build the frontend before creating the jar
    dependsOn(":rules:assemble")
    // package the frontend app within the jar as static
    def frontendBuildDir = project(":rules").buildDir
    def frontendDist = frontendBuildDir.toPath().resolve("dist/js/productionExecutable/")
    from(frontendDist) {
        include("**/*")
        into("static/scripts")
    }
}

jar.configure {
	dependsOn tasks.copyFromNpm
}

compileTestJava.configure {
	dependsOn tasks.copyFromNpm
}

bootJar.configure {
	dependsOn tasks.cssCopy
	dependsOn tasks.javascriptCopy
}

resolveMainClassName.configure {
	dependsOn tasks.cssCopy
	dependsOn tasks.javascriptCopy
}

jibBuildTar.configure {
	dependsOn tasks.cssCopy
	dependsOn tasks.javascriptCopy
}
